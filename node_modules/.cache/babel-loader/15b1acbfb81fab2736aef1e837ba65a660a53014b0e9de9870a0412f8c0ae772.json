{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      task: \"\",\n      editedTask: null,\n      statuses: [\"to-do\", \"in-progress\", \"finished\"],\n      tasks: []\n    };\n  },\n  created() {\n    this.fetchTasks();\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await fetch(\"http://localhost:3000/tasks\");\n        this.tasks = await response.json();\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    },\n    async submitTask() {\n      if (this.task.length === 0) return;\n      if (this.editedTask != null) {\n        const editedTask = this.tasks[this.editedTask];\n        editedTask.name = this.task;\n        try {\n          await fetch(`http://localhost:3000/tasks/${editedTask.id}`, {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(editedTask)\n          });\n          this.editedTask = null;\n        } catch (error) {\n          console.error(\"Error updating task:\", error);\n        }\n      } else {\n        const newTask = {\n          name: this.task,\n          status: \"to-do\",\n          createdAt: new Date().toISOString(),\n          completionDate: null\n        };\n        try {\n          const response = await fetch(\"http://localhost:3000/tasks\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newTask)\n          });\n          const data = await response.json();\n          this.tasks.push(data);\n        } catch (error) {\n          console.error(\"Error adding task:\", error);\n        }\n      }\n      this.task = \"\";\n    },\n    async changeStatus(index) {\n      const task = this.tasks[index];\n      const newIndex = (this.statuses.indexOf(task.status) + 1) % this.statuses.length;\n      task.status = this.statuses[newIndex];\n      if (task.status === 'finished') {\n        task.completionDate = new Date().toISOString();\n      } else {\n        task.completionDate = null;\n      }\n      try {\n        await fetch(`http://localhost:3000/tasks/${task.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(task)\n        });\n      } catch (error) {\n        console.error(\"Error updating task status:\", error);\n      }\n    },\n    async deleteTask(index) {\n      const taskId = this.tasks[index].id;\n      this.tasks.splice(index, 1);\n      try {\n        await fetch(`http://localhost:3000/tasks/${taskId}`, {\n          method: \"DELETE\"\n        });\n      } catch (error) {\n        console.error(\"Error deleting task:\", error);\n      }\n    },\n    editTask(index) {\n      this.task = this.tasks[index].name;\n      this.editedTask = index;\n    },\n    capitalizeFirstChar(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      const formattedDate = date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZone: 'UTC',\n        timeZoneName: 'short'\n      });\n      return formattedDate;\n    }\n  }\n};","map":{"version":3,"names":["name","props","msg","String","data","task","editedTask","statuses","tasks","created","fetchTasks","methods","response","fetch","json","error","console","submitTask","length","id","method","headers","body","JSON","stringify","newTask","status","createdAt","Date","toISOString","completionDate","push","changeStatus","index","newIndex","indexOf","deleteTask","taskId","splice","editTask","capitalizeFirstChar","str","charAt","toUpperCase","slice","formatDate","dateString","date","formattedDate","toLocaleDateString","year","month","day","hour","minute","second","timeZone","timeZoneName"],"sources":["src/components/TodoApp.vue"],"sourcesContent":["<template>\n  <div class=\"container\" style=\"max-width: 600px\">\n    <!-- Heading -->\n    <h2 class=\"text-center mt-5\">My Vue Todo App</h2>\n\n    <!-- Input -->\n    <div class=\"d-flex mt-5\">\n      <input\n        type=\"text\"\n        v-model=\"task\"\n        placeholder=\"Enter task\"\n        class=\"w-100 form-control\"\n      />\n      <button class=\"btn btn-warning rounded-0\" @click=\"submitTask\">\n        SUBMIT\n      </button>\n    </div>\n\n    <!-- Task table -->\n    <table class=\"table table-bordered mt-5\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Task</th>\n          <th scope=\"col\">Created At</th>\n          <th scope=\"col\">Completion Date</th>\n          <th scope=\"col\" style=\"width: 120px\">Status</th>\n          <th scope=\"col\" class=\"text-center\">#</th>\n          <th scope=\"col\" class=\"text-center\">#</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(task, index) in tasks\" :key=\"task.id\">\n          <td>\n            <span :class=\"{ 'line-through': task.status === 'finished' }\">\n              {{ task.name }}\n            </span>\n          </td>\n          <td>{{ formatDate(task.createdAt) }}</td>\n          <td>\n            {{ task.status === 'finished' ? formatDate(task.completionDate) : 'N/A' }}\n          </td>\n          <td>\n            <span\n              class=\"pointer noselect\"\n              @click=\"changeStatus(index)\"\n              :class=\"{\n                'text-danger': task.status === 'to-do',\n                'text-success': task.status === 'finished',\n                'text-warning': task.status === 'in-progress',\n              }\"\n            >\n              {{ capitalizeFirstChar(task.status) }}\n            </span>\n          </td>\n          <td class=\"text-center\">\n            <div @click=\"deleteTask(index)\">\n              <span class=\"fa fa-trash pointer\"></span>\n            </div>\n          </td>\n          <td class=\"text-center\">\n            <div @click=\"editTask(index)\">\n              <p class=\"fa fa-pen pointer\"></p>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"HelloWorld\",\n  props: {\n    msg: String,\n  },\n\n  data() {\n    return {\n      task: \"\",\n      editedTask: null,\n      statuses: [\"to-do\", \"in-progress\", \"finished\"],\n      tasks: [],\n    };\n  },\n\n  created() {\n    this.fetchTasks();\n  },\n\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await fetch(\"http://localhost:3000/tasks\");\n        this.tasks = await response.json();\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    },\n\n    async submitTask() {\n      if (this.task.length === 0) return;\n\n      if (this.editedTask != null) {\n        const editedTask = this.tasks[this.editedTask];\n        editedTask.name = this.task;\n        try {\n          await fetch(`http://localhost:3000/tasks/${editedTask.id}`, {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(editedTask),\n          });\n          this.editedTask = null;\n        } catch (error) {\n          console.error(\"Error updating task:\", error);\n        }\n      } else {\n        const newTask = {\n          name: this.task,\n          status: \"to-do\",\n          createdAt: new Date().toISOString(),\n          completionDate: null\n        };\n        try {\n          const response = await fetch(\"http://localhost:3000/tasks\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(newTask),\n          });\n          const data = await response.json();\n          this.tasks.push(data);\n        } catch (error) {\n          console.error(\"Error adding task:\", error);\n        }\n      }\n\n      this.task = \"\";\n    },\n\n    async changeStatus(index) {\n      const task = this.tasks[index];\n      const newIndex = (this.statuses.indexOf(task.status) + 1) % this.statuses.length;\n      task.status = this.statuses[newIndex];\n      if (task.status === 'finished') {\n        task.completionDate = new Date().toISOString();\n      } else {\n        task.completionDate = null;\n      }\n\n      try {\n        await fetch(`http://localhost:3000/tasks/${task.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(task),\n        });\n      } catch (error) {\n        console.error(\"Error updating task status:\", error);\n      }\n    },\n\n    async deleteTask(index) {\n      const taskId = this.tasks[index].id;\n      this.tasks.splice(index, 1);\n      try {\n        await fetch(`http://localhost:3000/tasks/${taskId}`, {\n          method: \"DELETE\",\n        });\n      } catch (error) {\n        console.error(\"Error deleting task:\", error);\n      }\n    },\n\n    editTask(index) {\n      this.task = this.tasks[index].name;\n      this.editedTask = index;\n    },\n\n    capitalizeFirstChar(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      const formattedDate = date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZone: 'UTC',\n        timeZoneName: 'short'\n      });\n      return formattedDate;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.pointer {\n  cursor: pointer;\n}\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Old versions of Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n  user-select: none; /* Non-prefixed version, currently\n                                  supported by Chrome, Edge, Opera and Firefox */\n}\n.line-through {\n  text-decoration: line-through;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}